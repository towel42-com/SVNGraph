/******************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the Qt Charts module.
**
** $QT_BEGIN_LICENSE:COMM$
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** $QT_END_LICENSE$
**
******************************************************************************/

/*!
    \example zoomlinechart
    \title Zoom Line Example
    \ingroup qtcharts_examples

    \brief The example shows how to create your own custom zooming effect

    The example shows how to create your own custom zooming effect with QRubberBand by using a mouse
    and how to use touch gestures for paning and zooming.
    \image examples_zoomlinechart1.png
    \image examples_zoomlinechart2.png

    Let's first create a line series with some example data.
    \snippet zoomlinechart/main.cpp 1

    Then we create a custom chart view by deriving from QChartView:
    \snippet zoomlinechart/chartview.h 1

    We override mouse and key event handling
    \snippet zoomlinechart/chartview.h 2

    Then we implement a custom logic for mouse and key events. For example pressing the '+' key will zoom in and pressing
    the '-' key will zoom out.
    \snippet zoomlinechart/chartview.cpp 1

    We also create our own QChart:
    \snippet zoomlinechart/chart.h 1

    Where we can handle the gestures:
    \snippet zoomlinechart/chart.cpp 1

    Note that you will need to call grabGesture() to both QMainWindow and QChart.
*/
